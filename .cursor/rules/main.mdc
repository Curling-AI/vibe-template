---
description:
globs: src/**/*.tsx,src/**/*.ts
alwaysApply: false
---
This is a project that uses Vite, Typescript, React, React Router, Zustand and Tailwind, and you are an expert on these tecnologies.

### Project structure

root/                       -> The project directory
├── public/                 -> Where the static assets like images and icons go
├── src/                    -> The main application source code directory
│   ├── assets/             -> The static assetts that need to be processed by the vite build tool goes here
│   ├── components/         -> All the reusable components must live in this directory
│   │   ├── ui/             -> The shadcn components are installed and accessible in his directory, check here before creating a new component
│   ├── hooks/              -> Reusable React hooks go here
│   ├── lib/                -> Reusable modules go here
│   ├── pages/              -> All page components must live here
│   ├── providers/          -> Visual component data that must available to all component tree
│   ├── stores/             -> All component state, both shared and page specific, must live here. Use zustand stores.
│   ├── App.tsx             -> The Main App component, it contains the routing configuration, pages and providers instantiation
│   ├── index.css           -> The main application styles (mostly theme and animation configuration). Use tailwind.
│   ├── main.tsx            -> The main App entripoint (instantiation)
├── index.html              -> The main HTML file where the app will be rendered
├── tailwind.config.js      -> The tailwind configuration, contains the theme config
└── Other config files...

### Project guidelines

#### Code Style and Structure
- Write concise, technical JavaScript code.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content.

#### Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Use PascalCase for components (e.d., pages/About.tsx)
- Favor named exports for components.

#### React Best Practices
- Use functional components
- Implement hooks correctly (useState, useEffect, useContext, useReducer, useMemo, useCallback).
- Follow the Rules of Hooks (only call hooks at the top level, only call hooks from React functions).
- Create custom hooks to extract reusable component logic.
- Use React.memo() for component memoization when appropriate.
- Implement useCallback for memoizing functions passed as props.
- Use useMemo for expensive computations.
- Avoid inline function definitions in render to prevent unnecessary re-renders.
- Prefer composition over inheritance.
- Use children prop and render props pattern for flexible, reusable components.
- Use refs sparingly and mainly for DOM access.
- Implement error boundaries to catch and handle errors gracefully.
- Use cleanup functions in useEffect to prevent memory leaks.
- Use short-circuit evaluation and ternary operators for conditional rendering.

#### State Management
- Use Zustand for global state management.
- Lift state up when needed to share state between components.
- Use context for intermediate state sharing when prop drilling becomes cumbersome.

#### UI and Styling
- Use Shadcn UI and Radix UI for component foundations.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

#### Performance Optimization
- Optimize images: use WebP format, include size data, implement lazy loading.
- Optimize Web Vitals (LCP, CLS, FID).

#### Forms and Validation
- Use controlled components for form inputs.
- Implement form validation uzing zod.
- Consider using libraries like ShadCN FormField component with react-hook-form for complex forms.
- Use Zod for schema validation.

Error Handling and Validation
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Model expected errors as return values in Server Actions.

Accessibility (a11y)
- Use semantic HTML elements.
- Implement proper ARIA attributes.
- Ensure keyboard navigation support.

Security
- Sanitize user inputs to prevent XSS attacks.
- Use dangerouslySetInnerHTML sparingly and only with sanitized content.
